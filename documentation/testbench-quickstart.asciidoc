---
title: Quick Start
order: 2
layout: page
---

[[testbench.quickstart]]
= Quick Start

In the following, we give instructions for getting Vaadin TestBench running in
minutes. You can create either a new Eclipse project or a Maven project. Both
project types require installing a license key, so we cover that first.

[[testbench.quickstart.license]]
== Installing License Key

Before running tests, you need to install a license key. You can purchase Vaadin
TestBench or obtain a free trial key from the
link:https://vaadin.com/directory#addon/vaadin-testbench[Vaadin TestBench
download page] in Vaadin Directory. You need to register in Vaadin Directory to
obtain the key.

[[figure.testbench.quickstart.license]]
.Obtaining License Key from Vaadin Directory
image::img/screenshots/directory-license-key.png[]

To install the license key on a development workstation, you can copy and paste
it verbatim to a [filename]#.vaadin.testbench.developer.license# file in your
home directory. For example, in Linux and OSÂ X:

[subs="normal"]
----
[prompt]#$# [command]#echo# "[replaceable]##L1cen5e-c0de##" &gt; [parameter]#~/.vaadin.testbench.developer.license#
----
You can also pass the key as a system property to the Java application running
the tests, usually with a [literal]#++-D++# option on the command-line:

[subs="normal"]
----
[prompt]#$# [command]#java# -D[parameter]##vaadin.testbench.developer.license##=[replaceable]##L1cen5e-c0de## ...
----
How you actually pass the parameter to your test runner depends on the actual
test execution environment. Below are listed a few typical environments:

Eclipse IDE:: To install the license key for all projects, select "Window > Preferences" and
navigate to the "Java > Installed JREs" section. Select the JRE version that you
use for the application and click [guibutton]#Edit#. In the [guilabel]#Default
VM arguments#, give the [parameter]#-D# expression as shown above.

+
For a single project, create a new JUnit launch configuration in "Run > Run
configurations". Select [guilabel]#JUnit# and click [guibutton]#New launch
configuration#. If you have already ran JUnit in the project, the launch
configuration already exists. Select JUnit 4 if not selected automatically. Go
to [guilabel]#Arguments# tab and give the [parameter]#-D# expression in the
[guilabel]#VM arguments# field. Click [guibutton]#Run# to run the tests
immediately or [guibutton]#Close# to just save the settings.

Apache Ant:: If running tests with the [literal]#++<junit>++# task in Apache Ant, as
described in
<<dummy/../../testbench/testbench-execution#testbench.execution.ant,"Running
Tests with Ant">>, you can pass the key as follows:


+
[subs="normal"]
----
&lt;sysproperty key="vaadin.testbench.developer.license"
             value="**L1cen5e-c0de**"/&gt;
----
+
However, you should never store license keys in a source repository, so if the
Ant script is stored in a source repository, you should pass the license key to
Ant as a property that you then use in the script for the value argument of the
[literal]#++<sysproperty>++# as follows:


+
[subs="normal"]
----
&lt;sysproperty key="vaadin.testbench.developer.license"
    value="**${vaadin.testbench.developer.license}**"/&gt;
----
+
When invoking Ant from the command-line, you can pass the property with a
[parameter]#-D# parameter to Ant.

Apache Maven:: If running tests with Apache Maven, you can pass the license key with a
[literal]#++-D++# parameter to Maven:


+
[subs="normal"]
----
[prompt]#$# [command]#mvn# -D[parameter]##vaadin.testbench.developer.license##=[replaceable]##L1cen5e-c0de## verify
----
TeamCity:: In TeamCity, you can pass the license key to build runners as a system property
in the build configuration. However, this only passes it to a runner. As
described above, Maven passes the parameter as is to JUnit, but Ant does not do
so implicitly, so you need to forward it explicitly as described earlier.



ifdef::web[]
See link:https://vaadin.com/directory/help/installing-cval-license[the AGPL
license key installation instructions] for more details.
endif::web[]


[[testbench.quickstart.eclipse]]
== Quick Start with Eclipse

Once you have installed the Vaadin Plugin for Eclipse, you can use it to create
a new Vaadin 7 project with the TestBench test enabled, as described in
<<dummy/../../framework/getting-started/getting-started-first-project#getting-started.first-project.creation,"Creating
the Project">>. In the project settings, you need to have the [guilabel]#Create
TestBench test# setting enabled.

The test case stub is created under [filename]#test# source folder, so that it
will not be deployed with the application. The project and source folders are
illustrated in <<figure.testbench.quickstart.eclipse-project>>.

[[figure.testbench.quickstart.eclipse-project]]
.Eclipse Project with a Test Case
image::img/eclipse-project-annotated-lo.png[]

You can observe that the UI and the test case are much like in the illustration
in
<<dummy/../../testbench/testbench-overview#figure.testbench.webdriver,"Controlling
the Browser with Testbench">>. The resulting test case stub is described in
detail in
<<dummy/../../testbench/testbench-development#testbench.development.basic,"Basic
Test Case Structure">>.

To run the test, open the [filename]#MyprojectTest.java# file in the editor and
press ShiftAltXT. The browser should open with the application UI and TestBench
run the tests. The results are displayed in the [guilabel]#JUnit# view in
Eclipse, as shown in <<figure.testbench.quickstart.eclipse-junit>>.

[[figure.testbench.quickstart.eclipse-junit]]
.JUnit Test Results in Eclipse
image::img/screenshots/eclipse-junit.png[]


[[testbench.quickstart.maven]]
== Quick Start with Maven

With Maven, you need to create a new Vaadin project with the
[literal]#++vaadin-archetype-application++# archetype, as described in
<<dummy/../../framework/getting-started/getting-started-maven#getting-started.maven,"Using
Vaadin with Maven">>.

The [filename]#src# folder under the project contains both the sources for the
application and the tests. The test case stub in the [filename]#src/test# folder
is described in detail in
<<dummy/../../testbench/testbench-development#testbench.development.basic,"Basic
Test Case Structure">>.

The license needs to be installed or given as parameter for the following
command, as mentioned earlier. Build the project with the [literal]#++verify++#
or a later phase in the build lifecycle. For example, from the command-line:

[subs="normal"]
----
[prompt]#$# [command]#mvn# [parameter]#verify#
----
This will execute all required lifecycle phases, including compilation and
packaging the application, launch Jetty web server to host the application, and
run the TestBench tests. The TestBench tests are run in the
[literal]#++integration-test++# phase, but the web server is stopped in the
[literal]#++post-integration-test++# phase, hence we call the
[literal]#++verify++# phase. The results are reported on the console. A Maven
GUI, such as the one in Eclipse, will provide more visual results.

For more details on the Maven POM configuration for Vaadin TestBench, see
<<dummy/../../testbench/testbench-maven#testbench.maven,"Integration Testing
with Maven">>.




