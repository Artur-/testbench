# TestBench 3 Quick Start

## TestBench Recorder
In TestBench 3, all tests are plain JUnit test cases using the WebDriver API for driving browsers. TestBench Recorder 3.0 makes it easy to
create a stub for a test, that is later fully developed and refactored in a Java code editor as a JUnit test.

## IDE
Any IDE can be used for developing TestBench test cases. TestBench test cases are just plain JUnit test cases using an extended WebDriver API.
To use TestBench in your favorite IDE, add the `vaadin-testbench-standalone-3.0.0-SNAPSHOT.jar` library to the project and you're good to go.
The standalone JAR contains all dependencies, so you might need to place it at the very bottom in the CLASSPATH if you depend on certain versions
of the dependencies. You can also use the maven package and add the dependencies manually, ask jonatan@vaadin.com for instructions on this if needed.

Example tests can be found in `/example/ant/src/TestBenchExample.java` and they can be run as any JUnit test, e.g. "Run as JUnit" in your IDE.

## Using maven
See the installation instructions in `/maven/INSTALL` and the example in `/example/maven/`

## Using ant
See the example in `/example/ant/`


## Creating Tests Without the Recorder
The first thing you might want to do when creating a test case is to extend from the `TestBenchTestCase` class. This class currently only provides
one method, which is `testBench(WebDriver)`. It's a helper method for accessing the TestBench API, where you normally would have to cast the
`WebDriver` instance to `TestBenchCommands` to be able to access the API. See the examples mentioned above for how it works and how a TestBench enabled
WebDriver is created (using `TestBench.create()`).

Creating tests without the recorder is not hard when you use the correct tools. This does require some knowledge of XPath, CSS or the old
TestBench Recorder (bundled). The main issue is selecting the correct elements to operate on in your tests. There are three ways to select elements:

- XPath expressions
	- `driver.findElement(By.xpath('//div'));`
- CSS selectors
	- `driver.findElement(By.css('v-button'));`
- Vaadin selectors
	- `testBench(driver).findElementByVaadinSelector('/VVerticalLayout[0]/ChildComponentContainer[1]/VButton[0]')`

### XPath Expressions
The easiest way to get started with XPath expressions is to install the [XPath Checker add-on](http://code.google.com/p/xpathchecker/) for Mozilla Firefox.
This add-on allows you to right-click on an element and choose "View XPath", where the expression to select that very element is provided. You can also edit
the expression and see the result in real-time. The XPath expression generated in this viewer can almost be directly used in Vaadin TestBench.

The XPath generated by the add-on may start with `id('myWindowName-123456')`, where `myWindowName` is the name of the Vaadin application window
and `123456` is a random number sequence. The random number sequence is just that, a random number sequence, and will change the next time you run your
application. This means that the `id('myWindowName-123456')` needs to be refactored into something that won't change. One way would be to replace it with

	//div[contains(@id, "myWindowName")]/rest/of/xpath

An XPath tutorial can be found at [http://www.w3schools.com/xpath/](http://www.w3schools.com/xpath/)

### CSS Selectors
CSS selectors are a good choice if you are familiar with CSS. A tutorial can be found [here](http://css.maxdesign.com.au/selectutorial/), also
check out [this cheat sheet](http://media.smashingmagazine.com/wp-content/uploads/images/css3-cheat-sheet/css3-cheat-sheet.pdf).

### Vaadin Selectors
Vaadin selectors are close to impossible to figure out by hand, but with the help of (the old) TestBench Recorder they are as easy as copy & paste.
Navigate to your application and fire up TestBench Recorder. While recording, click on the elements you wish to access. A `mouseClick` command will be
recorded for each click and the target parameter for the command will contain the Vaadin selector for that element. The selector can then be copy & pasted
into your test case. Just remember to remove the "vaadin=" string from the beginning of the target parameter, as this is just an internal representation in
the recorder for knowing what kind of selector is in use ("xpath", "css" or "vaadin").

## More information
Read the full [Vaadin TestBench manual](https://vaadin.com/book/-/page/testbench.html) in [Book of Vaadin](https://vaadin.com/book/).
Further information on the WebDriver API can be found in the [Selenium 2 documentation]/(http://seleniumhq.org/docs) in the
[WebDriver](http://seleniumhq.org/docs/03_webdriver.html) and [advanced usage](http://seleniumhq.org/docs/04_webdriver_advanced.html) sections.
