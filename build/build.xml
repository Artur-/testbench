<?xml version="1.0"?>

<project name="TestBench build" basedir="." default="testbench-distribution-package">

	<!-- Build type specific configuration -->
    <echo>Using build type specfic property file: "${build.properties.file}"</echo>
	<!-- Load version from properties file. If not found, version is specified below. -->
    <property file="${build.properties.file}" />
	
	<property name="version.base" value="2.4.2" />
	
	<tstamp />
	<property name="timestamp" value="${DSTAMP}${TSTAMP}" />
	<property name="testbench.version" value="${version.base}.development.${timestamp}" />
	
    <!-- If not already set by the build system -->
    <property name="version" value="${testbench.version}" />

	<property name="output.dir" value="result/package" />
	<!-- Add this property to exlude TestBenchRunner from build -->
	<property name="exclude.runner" value="true" />

	<target name="testbench.jar">
		<delete dir="result" failonerror="true" />

		<mkdir dir="${output.dir}" />
		<mkdir dir="result/classes" />
		<javac srcdir="../src" destdir="result/classes" debug="true" encoding="utf-8" target="1.5" source="1.5">
			<src path="../common/src" />
			<classpath>
				<fileset dir="../lib" id="libs">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
		<jar jarfile="${output.dir}/vaadin-testbench-${version}.jar" compress="true">
			<manifest>
				<attribute name="Class-Path" value="junit-4.5.jar selenium-java-client-driver.jar js.jar" />
			</manifest>
			<zipfileset dir="../src">
				<include name="**/**.js" />
			</zipfileset>
			<zipfileset dir="result/classes">
				<include name="**/**" />
				<exclude name="**/test/**" />
				<exclude name="**/runner/**" if="exclude.runner"/>
			</zipfileset>
			<zipfileset src="../lib/commons-io-1.1.jar" />
			<zipfileset src="../lib/commons-codec-1.4.jar" />
			<zipfileset src="../lib/js.jar" />
			<zipfileset src="../lib/junit-4.5.jar" />
			<zipfileset src="../lib/selenium-java-client-driver.jar" />
		</jar>
	</target>
	
    <!-- ================================================================== -->
    <!-- Documentation                                                      -->
    <!-- ================================================================== -->

    <!-- Manual -->
    <target name="manual" unless="run.no-manual">
        <property name="manual.version" value="2.4"/>
        <property name="manual.basename" value="vaadin-testbench-manual-${manual.version}"/>

        <!-- Source and target files of the manual -->
        <property name="manual.odt.filename" value="${manual.basename}.odt"/>
        <property name="manual.pdf.filename" value="${manual.basename}.pdf"/>

        <property name="manual.odt" value="../doc/${manual.odt.filename}"/>
        <property name="manual.pdf" value="result/${manual.pdf.filename}"/>

        <!-- Must delete the old version or conversion fails -->
        <delete file="${manual.pdf}"/>

        <!-- Start OpenOffice service -->
        <exec executable="python" searchpath="true" failonerror="true" >
            <arg value="odf-converter.py"/>
            <arg value="start"/>
        </exec>

        <!-- Convert the ODF text document to PDF -->
        <java jar="lib/jodconverter/jodconverter-cli-2.2.2.jar" fork="true">
            <arg value="${manual.odt}"/>
            <arg value="${manual.pdf}"/>
        </java>

        <!-- Stop OpenOffice service -->
        <exec executable="python" searchpath="true" failonerror="true" >
            <arg value="odf-converter.py"/>
            <arg value="stop"/>
        </exec>
    </target>

	<target name="javadoc" unless="exclude.runner">
		<javadoc sourcepath="../src" destdir="result/doc" excludepackagenames="com.vaadin.testbench.test,com.vaadin.testbench.testcase,com.vaadin.testbench.util">
			<classpath>
				<fileset dir="../lib" id="libs">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javadoc>
		<zip destfile="${output.dir}/TestBenchRunner-javadoc-${version}.zip" compress="true">
			<zipfileset dir="result/doc"/>
		</zip>
	</target>
	
    <!-- ================================================================== -->
    <!--                                                                    -->
    <!-- ================================================================== -->

	<target name="testbench-recorder">
		<!-- Create the TestBench IDE FireFox plugin -->
		<subant target="extension">
			<property name="version" value="${version}"/>
			<fileset dir="../testbench-recorder" includes="build.xml" />
		</subant>
		<copy file="../testbench-recorder/extension/vaadin-testbench-recorder-${version}.xpi" todir="${output.dir}/vaadin-testbench-recorder" />
	</target>

	<target name="testbench-grid">
		<parallel>
			<subant target="package-standalone">
				<property name="timestamp" value="${timestamp}"/>
			  	<property name="version" value="vaadin-testbench-${version}"/>
				<fileset dir="../testbench-grid/hub" includes="build.xml" />
			</subant>
			<subant target="package-standalone">
				<property name="timestamp" value="${timestamp}"/>
			  	<property name="version" value="vaadin-testbench-${version}"/>
				<fileset dir="../testbench-grid/remote-control" includes="build.xml" />
			</subant>
		</parallel>
	</target>
	
	<target name="testbench-distribution-package" depends="testbench.jar,manual,javadoc,testbench-recorder,testbench-grid,update-run-scripts,run-tests,run-all-tests,create-extension">
		<property name="package.root" value="vaadin-testbench-${version}"/>
		<property name="package.grid.root" value="vaadin-testbench-grid-${version}"/>
        <copy todir="${output.dir}">
            <filterchain>
                <expandproperties />
                <replacetokens begintoken="@" endtoken="@">
                    <token key="version" value="${version}" />
                </replacetokens>
            </filterchain>
            <fileset dir=".">
                <include name="MANIFEST.MF" />
            </fileset>
        </copy>

		<zip destfile="${output.dir}/vaadin-testbench-${version}.zip">
			<zipfileset dir="${output.dir}" includes="MANIFEST.MF" prefix="META-INF"/>
			<zipfileset dir="${output.dir}" includes="vaadin-testbench-${version}.jar" prefix="${package.root}"/>
			<zipfileset dir="${output.dir}" includes="vaadin-testbench-recorder/vaadin-testbench-recorder-${version}.xpi" prefix="${package.root}" />
<!--			<zipfileset dir=".." includes="selenium-extensions/**" />-->
			<!-- Not certain about MPL or CPL licenses -->
<!--			<fileset dir=".." includes="lib/js.jar lib/junit*.jar" excludes="lib/**-source* lib/**-src*" />-->
			<zipfileset dir=".." includes="example/test.xml" prefix="${package.root}" />
			<zipfileset dir=".." includes="example/testscripts/*.html" prefix="${package.root}" />
			<zipfileset dir=".." includes="example/parameters/*.properties" prefix="${package.root}" />

			<!-- Add documentation -->
			<zipfileset dir="../doc" prefix="${package.root}/documentation">
				<include name="*.pdf" />
				<include name="license*.txt" />
				<include name="licensing.txt" />
				<exclude name="TestBenchRunner*.pdf" if="exclude.runner" />
			</zipfileset>
			<zipfileset dir="result" prefix="${package.root}/documentation">
				<include name="${manual.pdf.filename}" />
			</zipfileset>

<!--			<fileset dir=".." includes="example/tests/**" />-->
			<!-- Add hub and remote-control to zip -->
			<zipfileset dir="../testbench-grid/hub" includes="hub.sh hub.bat grid_configuration.yml" prefix="${package.root}/grid/hub" />
			<zipfileset dir="../testbench-grid/hub/target/dist/lib" includes="**standalone*.jar" prefix="${package.root}/grid/hub/lib" />
			
			<zipfileset dir="../testbench-grid/remote-control" includes="rc.sh rc.bat rc_configuration.xml" prefix="${package.root}/grid/remote-control" />
			<zipfileset dir="../testbench-grid/remote-control/target/dist/lib" includes="**standalone*.jar" prefix="${package.root}/grid/remote-control/lib" />
			<zipfileset dir="../testbench-grid/vendor" includes="selenium-server*.jar" prefix="${package.root}/grid/remote-control/lib" />
			<zipfileset dir="../selenium-extensions/core" includes="user-extensions.js" prefix="${package.root}/grid/remote-control" />
		</zip>
			
		<zip destfile="${output.dir}/vaadin-testbench-grid-${version}.zip">
			<zipfileset dir="../testbench-grid/hub" includes="hub.sh hub.bat grid_configuration.yml" prefix="${package.grid.root}/hub" />
			<zipfileset dir="../testbench-grid/hub/target/dist/lib" includes="**standalone*.jar" prefix="${package.grid.root}/hub/lib" />
			
			<zipfileset dir="../testbench-grid/remote-control" includes="rc.sh rc.bat rc_configuration.xml" prefix="${package.grid.root}/remote-control" />
			<zipfileset dir="../testbench-grid/remote-control/target/dist/lib" includes="**standalone*.jar" prefix="${package.grid.root}/remote-control/lib" />
			<zipfileset dir="../testbench-grid/vendor" includes="selenium-server*.jar" prefix="${package.grid.root}/remote-control/lib" />
			<zipfileset dir="../selenium-extensions/core" includes="user-extensions.js" prefix="${package.grid.root}/remote-control" />
		</zip>
	</target>

	<!-- Creates script files for starting hub and remote-control -->
	<target name="update-run-scripts">
		<copy file="../testbench-grid/hub/hub.tpl" tofile="../testbench-grid/hub/hub.sh" overwrite="true">
					<filterchain>
						<replacetokens>
							<token key="build" value="${version}" />
						</replacetokens>
					</filterchain>
		</copy>
		<chmod file="../testbench-grid/hub/hub.sh" perm="555" />
		<copy file="../testbench-grid/hub/hub.bat_tpl" tofile="../testbench-grid/hub/hub.bat" overwrite="true">
					<filterchain>
						<replacetokens>
							<token key="build" value="${version}" />
						</replacetokens>
					</filterchain>
		</copy>
		<copy file="../testbench-grid/remote-control/rc.tpl" tofile="../testbench-grid/remote-control/rc.sh" overwrite="true">
					<filterchain>
						<replacetokens>
							<token key="build" value="${version}" />
						</replacetokens>
					</filterchain>
		</copy>
		<chmod file="../testbench-grid/remote-control/rc.sh" perm="555" />
		<copy file="../testbench-grid/remote-control/rc.bat_tpl" tofile="../testbench-grid/remote-control/rc.bat" overwrite="true">
					<filterchain>
						<replacetokens>
							<token key="build" value="${version}" />
						</replacetokens>
					</filterchain>
		</copy>
	</target>
	
	<target name="run-tests" if="exclude.runner">
		<property name="class.path" value="${java.class.path}"/>
		<subant target="all-tests" buildpath="../test" failonerror="false">
			<property name="class.path" value="${class.path}"/>
			<property name="exclude.runner" value="${exclude.runner}" />
		</subant>
	</target>
	
	<target name="run-all-tests" unless="exclude.runner">
		<property name="class.path" value="${java.class.path}"/>
		<subant target="all-tests" buildpath="../test">
			<property name="class.path" value="${class.path}"/>
		</subant>
	</target>
				
	<target name="create-extension">
		<loadfile property="locator" srcFile="../selenium-extensions/core/locator.js">
			<filterchain>
				<replacetokens>
					<token key="bot" value="PageBot" />
				</replacetokens>
			</filterchain>
		</loadfile>
		<loadfile property="dofunction" srcFile="../selenium-extensions/core/doFunction.js" />
		<loadfile property="playback" srcFile="../testbench-recorder/chrome/content/selenium/scripts/selenium-executionloop.js" />
		<loadfile property="utilities" srcFile="../selenium-extensions/core/utilities.js" />
		<echo message="${locator}${line.separator}${dofunction}${line.separator}${playback}${line.separator}${utilities}" file="../selenium-extensions/core/user-extensions.js"/>
	</target>
</project>
