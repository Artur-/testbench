<?xml version="1.0"?>

<project name="TestBench build" basedir="." default="testbench-distribution-package">
	<tstamp />
	<property name="timestamp" value="${DSTAMP}${TSTAMP}" />
	<property name="version" value="2.0.0.development.${timestamp}" />
	<property name="output.dir" value="result/package" />
	<!-- Add this property to exlude TestBenchRunner from build -->
	<property name="exclude.runner" value="true" />

	<target name="testbench.jar">
		<delete dir="result" failonerror="false" />

		<mkdir dir="${output.dir}" />
		<mkdir dir="result/classes" />
		<javac srcdir="../src" destdir="result/classes">
			<classpath>
				<fileset dir="../lib" id="libs">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
		<jar jarfile="${output.dir}/Vaadin-TestBench-${version}.jar" compress="true">
			<manifest>
				<attribute name="Class-Path" value="junit-4.5.jar selenium-java-client-driver.jar js.jar" />
			</manifest>
			<zipfileset dir="../src">
				<include name="**/**.js" />
			</zipfileset>
			<zipfileset dir="result/classes">
				<include name="**/**" />
				<exclude name="**/test/**" />
				<exclude name="**/runner/**" if="exclude.runner"/>
			</zipfileset>
			<zipfileset src="../lib/commons-io-1.1.jar" />
			<zipfileset src="../lib/commons-codec-1.4.jar" />
			<zipfileset src="../lib/js.jar" />
			<zipfileset src="../lib/junit-4.5.jar" />
			<zipfileset src="../lib/selenium-java-client-driver.jar" />
		</jar>
	</target>
	
	<target name="javadoc" unless="exclude.runner">
		<javadoc sourcepath="../src" destdir="result/doc" excludepackagenames="com.vaadin.testbench.test,com.vaadin.testbench.testcase,com.vaadin.testbench.util">
			<classpath>
				<fileset dir="../lib" id="libs">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javadoc>
		<zip destfile="${output.dir}/TestBenchRunner-javadoc-${version}.zip" compress="true">
			<zipfileset dir="result/doc"/>
		</zip>
	</target>
	
	<target name="testbench-ide">
		<!-- Create the TestBench IDE FireFox plugin -->
		<subant target="extension">
			<property name="version" value="${version}"/>
			<fileset dir="../testbench-ide" includes="build.xml" />
		</subant>
		<copy file="../testbench-ide/extension/Vaadin-TestBench-ide-${version}.xpi" todir="${output.dir}/Vaadin-TestBench-ide" />
	</target>

	<target name="testbench-grid">
		<subant target="dist">
			<property name="timestamp" value="${timestamp}"/>
		  	<property name="version" value="Vaadin-TestBench-${version}"/>
			<fileset dir="../testbench-grid/infrastructure/core" includes="build.xml" />
		</subant>
		<subant target="package-standalone">
			<property name="timestamp" value="${timestamp}"/>
		  	<property name="version" value="Vaadin-TestBench-${version}"/>
			<fileset dir="../testbench-grid/infrastructure/webserver" includes="build.xml" />
		</subant>
		<parallel>
			<subant target="package-standalone">
				<property name="timestamp" value="${timestamp}"/>
			  	<property name="version" value="Vaadin-TestBench-${version}"/>
				<fileset dir="../testbench-grid/hub" includes="build.xml" />
			</subant>
			<subant target="package-standalone">
				<property name="timestamp" value="${timestamp}"/>
			  	<property name="version" value="Vaadin-TestBench-${version}"/>
				<fileset dir="../testbench-grid/remote-control" includes="build.xml" />
			</subant>
		</parallel>
		<parallel>
			<subant target="clean-classes">
			  	<property name="version" value="Vaadin-TestBench-${version}"/>
				<fileset dir="../testbench-grid/infrastructure/core" includes="build.xml" />
			</subant>
			<subant target="clean-classes">
			  	<property name="version" value="Vaadin-TestBench-${version}"/>
				<fileset dir="../testbench-grid/infrastructure/webserver" includes="build.xml" />
			</subant>
		</parallel>
	</target>
	
	<target name="testbench-distribution-package" depends="testbench.jar,javadoc,testbench-ide,testbench-grid,update-run-scripts,run-tests">
		<zip destfile="${output.dir}/Vaadin-TestBench-${version}.zip">
			<zipfileset dir="${output.dir}" includes="Vaadin-TestBench-${version}.jar" />
			<zipfileset dir="${output.dir}" includes="testbench-ide/Vaadin-TestBench-ide-${version}.xpi"  />
<!--			<zipfileset dir=".." includes="selenium-extensions/**" />-->
			<!-- Not certain about MPL or CPL licenses -->
<!--			<fileset dir=".." includes="lib/js.jar lib/junit*.jar" excludes="lib/**-source* lib/**-src*" />-->
			<zipfileset dir=".." includes="example/test.xml" />
			<zipfileset dir=".." includes="example/testscripts/*.html" />
			<!-- Add documentation -->
			<zipfileset dir="../doc" includes="*.pdf" prefix="documentation" />
<!--			<fileset dir=".." includes="example/tests/**" />-->
			<!-- Add hub and remote-control to zip -->
			<zipfileset dir="../testbench-grid/hub" includes="hub.sh hub.bat grid_configuration.yml" prefix="grid/hub" />
			<zipfileset dir="../testbench-grid/hub/target/dist/lib" includes="**standalone*.jar" prefix="grid/hub/lib" />
			
			<zipfileset dir="../testbench-grid/remote-control" includes="rc.sh rc.bat rc_configuration.xml" prefix="grid/remote-control" />
			<zipfileset dir="../testbench-grid/remote-control/target/dist/lib" includes="**standalone*.jar" prefix="grid/remote-control/lib" />
			<zipfileset dir="../testbench-grid/vendor" includes="selenium-server*.jar" prefix="grid/remote-control/lib" />
			<zipfileset dir="../selenium-extensions/core" includes="user-extensions.js" prefix="grid/remote-control" />
		</zip>
			
		<zip destfile="${output.dir}/Vaadin-TestBench-grid-${version}.zip">
			<zipfileset dir="../testbench-grid/hub" includes="hub.sh hub.bat grid_configuration.yml" prefix="hub" />
			<zipfileset dir="../testbench-grid/hub/target/dist/lib" includes="**standalone*.jar" prefix="hub/lib" />
			
			<zipfileset dir="../testbench-grid/remote-control" includes="rc.sh rc.bat rc_configuration.xml" prefix="remote-control" />
			<zipfileset dir="../testbench-grid/remote-control/target/dist/lib" includes="**standalone*.jar" prefix="remote-control/lib" />
			<zipfileset dir="../testbench-grid/vendor" includes="selenium-server*.jar" prefix="remote-control/lib" />
			<zipfileset dir="../selenium-extensions/core" includes="user-extensions.js" prefix="remote-control" />
		</zip>
	</target>

	<!-- Creates script files for starting hub and remote-control -->
	<target name="update-run-scripts">
		<copy file="../testbench-grid/hub/hub.tpl" tofile="../testbench-grid/hub/hub.sh" overwrite="true">
					<filterchain>
						<replacetokens>
							<token key="build" value="${version}" />
						</replacetokens>
					</filterchain>
		</copy>
		<copy file="../testbench-grid/hub/hub.bat_tpl" tofile="../testbench-grid/hub/hub.bat" overwrite="true">
					<filterchain>
						<replacetokens>
							<token key="build" value="${version}" />
						</replacetokens>
					</filterchain>
		</copy>
		<copy file="../testbench-grid/remote-control/rc.tpl" tofile="../testbench-grid/remote-control/rc.sh" overwrite="true">
					<filterchain>
						<replacetokens>
							<token key="build" value="${version}" />
						</replacetokens>
					</filterchain>
		</copy>
		<copy file="../testbench-grid/remote-control/rc.bat_tpl" tofile="../testbench-grid/remote-control/rc.bat" overwrite="true">
					<filterchain>
						<replacetokens>
							<token key="build" value="${version}" />
						</replacetokens>
					</filterchain>
		</copy>
	</target>
	
	<target name="run-tests" unless="exclude.runner">
		<property name="class.path" value="${java.class.path}"/>
		<subant target="all-tests" buildpath="../test">
			<property name="class.path" value="${class.path}"/>
		</subant>
	</target>
	
</project>
